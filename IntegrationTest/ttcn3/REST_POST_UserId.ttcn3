module REST_POST_UserId {
	import from Lib_Http all;

	import from UserIdService all;
	import from Lib_ServiceManagement all;
	import from Templates_Ausfallszeanrien all;

		

	
        
		testcase status_services() runs on RESTComponent {
				var charstring serviceStat_logingateway := getServiceStatus(LoginGW);
				var charstring serviceStat_authservice := getServiceStatus(Authservice);
				var charstring serviceStat_userservice := getServiceStatus(Userservice);
				const charstring antwort:= "Running";
		
				log("LoginGateway is " & serviceStat_logingateway);
				log("AuthService is " & serviceStat_authservice);
				log("UserService is " & serviceStat_userservice);
				

				if (serviceStat_logingateway == antwort and serviceStat_authservice== antwort and serviceStat_userservice== antwort) {
					setverdict(pass);
					stop;
				}
				
				setverdict(fail);	

				
			}
		   
		testcase test_RESTPost_LoginGateway() runs on RESTComponent system LoginRestService {
			
			map(mtc:p, system:s) param (config(AUTHORIZATION));
			p.send(loginRequest);
			timer t;
			t.start(5.0);
			var HTTPResponse valHttp;
			alt {
			[] p.receive(LoginResponse:{ body := omit, authorization := ?}) {
					setverdict(pass);
				}
			[] p
			   .receive(HTTPResponse:
						{
							statusLine := {statusCode := 200, reasonPhrase := *},
							headers := ?,
							body := *
						}) -> value valHttp{
						var charstring jwt := valHttp.headers[8].val;
					setverdict(pass);
					t.stop;
				}
			[] p.receive {
					setverdict(fail);
				}
			[] t.timeout {
					setverdict(fail);
				}
			}
		}
		
	
		testcase test_RESTPost_LoginGateway_invalid_input_user() runs on RESTComponent system LoginRestService {
					
					map(mtc:p, system:s) param (config(AUTHORIZATION));
					p.send(loginRequest_invalid_user);
					timer t;
					t.start(5.0);
					var HTTPResponse valHttp;
					alt {
					[] p.receive(LoginResponse:{ body := omit, authorization := omit}) {
							setverdict(pass);
						}
					[] p
					   .receive(HTTPResponse:
								{
									statusLine := {statusCode := 401, reasonPhrase := *},
									headers := ?,
									body := *
								}) -> value valHttp{
								var charstring jwt := valHttp.headers[8].val;
							setverdict(pass);
							t.stop;
						}
					[] p.receive {
							setverdict(fail);
						}
					[] t.timeout {
							setverdict(fail);
						}
					}
				}
		testcase test_RESTPost_LoginGateway_invalid_input_auth() runs on RESTComponent system LoginRestService {
							
							map(mtc:p, system:s) param (config(AUTHORIZATION));
							p.send(loginRequest_invalid_pass_auth);
							timer t;
							t.start(5.0);
							var HTTPResponse valHttp;
							alt {
							[] p.receive(LoginResponse:{ body := omit, authorization := omit}) {
									setverdict(pass);
								}
							[] p
							   .receive(HTTPResponse:
										{
											statusLine := {statusCode := 401, reasonPhrase := *},
											headers := ?,
											body := *
										}) -> value valHttp{
										var charstring jwt := valHttp.headers[8].val;
									setverdict(pass);
									t.stop;
								}
							[] p.receive {
									setverdict(fail);
								}
							[] t.timeout {
									setverdict(pass);
								}
							}
						}
	
		        
				  
				   }
	

with {
	encode "RESTfull/json"
}
