module UserIdService {
	import from Lib_Http all;
	import from Lib_JSON all;

	const charstring BASE_URL := "http://solv116.hypoport.local:8089";
	const charstring BASE_URL_userservice := "http://solv116.hypoport.local:8086";
	const charstring BASE_URL_authservice := "http://solv116.hypoport.local:8085";
	const charstring AUTHORIZATION := "Authorization: Basic NOT DEFINED";

	// The REST Calls
	type record Login {
		record {
			string username, string password
		} body
	}
	with {
		encode "REST/post";
		variant "path: /login";
		encode (body) "body/JSON"
	}
	type record Login_userservice {
			record {
				string email
			} body
		}
		with {
			encode "REST/post";
			variant "path: /user/login";
			encode (body) "body/JSON"
		}
	type record Login_authservice {
				record {
					string password, integer userId
				} body
			}
			with {
				encode "REST/post";
				variant "path: /gateway-permission/auth/login";
				encode (body) "body/JSON"
			}

	template Login loginRequest := {
		body := { "admin@mywowi.de", "mywowi"}
	}
	template Login_userservice loginRequest_userservice := {
			body := { "admin@mywowi.de"}
		}
	template Login_authservice loginRequest_authservice := {
		body := { "mywowi",2}
			}

	type record LoginResponse {
		string body optional,
		string authorization 		
	}
	with {
		encode "REST/postResponse";
		encode (body) "body/JSON";
		encode (authorization) "header:Authorization";
	}

	
	type record LoginResponse_user {
		string body,
		string authorization optional 		
	}
	with {
		encode "REST/postResponse";
		encode (body) "body/JSON";
		encode (authorization) "header:Authorization";
	}
	
	type record LoginResponse_auth {
		string body,
		string authorization optional		
	}
	with {
		encode "REST/postResponse";
		encode (body) "body/JSON";
		encode (authorization) "header:Authorization";
	}

	type port RESTfull message {
		out Login;
		in LoginResponse;
		in HTTPResponse;
		map param (RESTAPIconfig config);
	}
	type port RESTfull_user message {
		out Login_userservice;
		in LoginResponse_user;
		in HTTPResponse;
		map param (RESTAPIconfig config);
	}
	type port RESTfull_auth message {
		out Login_authservice;
		in LoginResponse_auth;
		in HTTPResponse;
		map param (RESTAPIconfig config);
	}

	type record RESTAPIconfig {
		string baseUrl, string authorization optional
	}

	template RESTAPIconfig config(string auth) := {
		baseUrl := BASE_URL, authorization := auth
	}
	template RESTAPIconfig config_user(string auth) := {
			baseUrl := BASE_URL_userservice, authorization := auth
		}
	template RESTAPIconfig config_auth(string auth) := {
				baseUrl := BASE_URL_authservice, authorization := auth
			}
	type component RESTComponent {
		port RESTfull p;
	}

	type component DBRestService {
		port RESTfull s;
	}
	type component RESTComponent_userservice {
			port RESTfull_user p;
		}

	type component DBRestService_userservice {
			port RESTfull_user s;
		}
	type component RESTComponent_authservice {
			port RESTfull_auth p;
		}

	type component DBRestService_authservice {
			port RESTfull_auth s;
		}
}
with {
	encode "RESTfull/json"
}
