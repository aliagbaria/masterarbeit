module AusfallSzenarien {
	
	
	
	import from Lib_Http all;

	import from UserIdService all;
	import from Lib_ServiceManagement all;
	import from Templates_Ausfallszeanrien all;

		

        
		testcase status_services() runs on RESTComponent {
				var charstring serviceStat_logingateway := getServiceStatus(LoginGW);
				var charstring serviceStat_authservice := getServiceStatus(Authservice);
				var charstring serviceStat_userservice := getServiceStatus(Userservice);
				const charstring antwort:= "Running";
		
				log("LoginGateway is " & serviceStat_logingateway);
				log("AuthService is " & serviceStat_authservice);
				log("UserService is " & serviceStat_userservice);
				

				if (serviceStat_logingateway == antwort and serviceStat_authservice== antwort and serviceStat_userservice== antwort) {
					setverdict(pass);
					stop;
				}
				
				setverdict(fail);	

				
			}
		   
	
		
						
		
						
	
	
		
		testcase test_RESTPost_LoginGateway_wiederkommen_userservice() runs on RESTComponent system LoginRestService {
								log("Der Userservice is " & getServiceStatus(Userservice));
								map(mtc:p, system:s) param (config(AUTHORIZATION));
								p.send(loginRequest);
								timer t;
								t.start(5.0);
								var HTTPResponse valHttp;
								alt {
								[] p.receive(LoginResponse:{ body := omit, authorization := ?}) {
										setverdict(pass);
									}
								[] p
								   .receive(HTTPResponse:
											{
												statusLine := {statusCode := 200, reasonPhrase := *},
												headers := ?,
												body := *
											}) -> value valHttp{
											var charstring jwt := valHttp.headers[8].val;
										setverdict(pass);
										t.stop;
									}
								[] p.receive {
										setverdict(fail);
									}
								[] t.timeout {
										setverdict(fail);
									}
								}
								log(stopService(Userservice));
								log("Der Userservice is " & getServiceStatus(Userservice));
								log(startService(Userservice));
								timer t_Delay := 80.0; 
								t_Delay.start;
							    t_Delay.timeout;
								p.send(loginRequest);
												
													alt {
															[] p.receive(LoginResponse:{ body := omit, authorization := ?}) {
																	
																}
															[] p
															   .receive(HTTPResponse:
																		{
																			statusLine := {statusCode := 200, reasonPhrase := *},
																			headers := ?,
																			body := *
																		}) -> value valHttp{
																		var charstring jwt := valHttp.headers[8].val;
																	
																	setverdict(pass);
																	
																}
															[] p.receive {
																	setverdict(fail);
																}
											}
											
								
								
							}
							
		
	testcase test_RESTPost_LoginGateway_wiederkommen_authervice() runs on RESTComponent system LoginRestService {
									log("Der Authservice is " & getServiceStatus(Authservice));
									map(mtc:p, system:s) param (config(AUTHORIZATION));
									p.send(loginRequest);
									timer t;
									t.start(5.0);
									var HTTPResponse valHttp;
									alt {
									[] p.receive(LoginResponse:{ body := omit, authorization := ?}) {
											setverdict(pass);
										}
									[] p
									   .receive(HTTPResponse:
												{
													statusLine := {statusCode := 200, reasonPhrase := *},
													headers := ?,
													body := *
												}) -> value valHttp{
												var charstring jwt := valHttp.headers[8].val;
												
											setverdict(pass);
											t.stop;
										}
									[] p.receive {
											setverdict(fail);
										}
									[] t.timeout {
											setverdict(fail);
										}
									}
									log(stopService(Authservice));
									log("Der Authservice is " & getServiceStatus(Authservice));
									log(startService(Authservice));
									timer t_Delay := 80.0; 
									t_Delay.start;
									t_Delay.timeout;
									p.send(loginRequest);
												
														alt {
																[] p.receive(LoginResponse:{ body := omit, authorization := ?}) {
																		
																	}
																[] p
																   .receive(HTTPResponse:
																			{
																				statusLine := {statusCode := 200, reasonPhrase := *},
																				headers := ?,
																				body := *
																			}) -> value valHttp{
																			var charstring jwt := valHttp.headers[8].val;
																	
																		setverdict(pass);
																		
																	}
																[] p.receive {
																		setverdict(fail);
																	}
												}
											
								
								
								}
							
		
		
		
	testcase test_RESTPost_LoginGateway_wiederkommen_auth_user_back() runs on RESTComponent system LoginRestService {
			
								map(mtc:p, system:s) param (config(AUTHORIZATION));
								
								p.send(loginRequest);
								timer t;
								log("Der Authservice is " & getServiceStatus(Authservice));
								log("Der Userservice is " & getServiceStatus(Userservice));
								var HTTPResponse valHttp;
								alt {
								[] p.receive(LoginResponse:{ body := omit, authorization := ?}) {
										
									}
								[] p
								   .receive(HTTPResponse:
											{
												statusLine := {statusCode := 200, reasonPhrase := *},
												headers := ?,
												body := *
											}) -> value valHttp{
											var charstring jwt := valHttp.headers[8].val;
											
									
									}
								[] p.receive {
										setverdict(fail);
									}
					
				
				
								}
												
												log(stopService(Authservice));
												log("Der Authservice is " & getServiceStatus(Authservice));
												log(stopService(Userservice));
												log("Der Userservice is " & getServiceStatus(Userservice));
												map(mtc:p, system:s) param (config(AUTHORIZATION));
										p.send(loginRequest);
												alt{
													[] p.receive(LoginResponse:{ body := ?, authorization := omit}) {
																			setverdict(pass);
																		}
																	[] p
																	   .receive(HTTPResponse:
																				{
																					statusLine := {statusCode := 500, reasonPhrase := *},
																					headers := ?,
																					body := *
																				}) -> value valHttp{
																				var charstring jwt := valHttp.headers[8].val;
															
																			log("Interner Serverfehler, da mindestens ein Service nicht erreichbar ist");
		
																			setverdict(pass);
															
																		}
																	[] p.receive {
																			setverdict(fail);
																		}
						
												}
												log(startService(Authservice));
												log(startService(Userservice));
												timer t_Delay := 90.0; 
												t_Delay.start;
												t_Delay.timeout;
												p.send(loginRequest);
												
												alt {
														[] p.receive(LoginResponse:{ body := omit, authorization := ?}) {
																//setverdict(pass);
															}
														[] p
														   .receive(HTTPResponse:
																	{
																		statusLine := {statusCode := 200, reasonPhrase := *},
																		headers := ?,
																		body := *
																	}) -> value valHttp{
																	var charstring jwt := valHttp.headers[8].val;
																	
																setverdict(pass);
																
															}
														[] p.receive {
																setverdict(fail);
															}
										}
										}
		
		        
				  
				   }
	

with {
	encode "RESTfull/json"
}
	





	