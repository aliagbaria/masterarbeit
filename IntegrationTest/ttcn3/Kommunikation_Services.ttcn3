module Kommunikation_Services {
	import from Lib_Http all;

		import from UserIdService all;
		import from Lib_ServiceManagement all;
		import from Templates_Ausfallszeanrien all;

	/* ** Wichtig: um die Testfälle starten zu können, muss eine direkte Verbindung oder eine VPN-Verbindung mit dem entsprechenden Server geben,
			 * weil, die Post-Requests auf einen lokalen Server im Unternehmen zugreifen. Die Ausfallszenarien der Services
			 * brauchen diese Verbindung, damit sie über SSH-Session laufen können, was an sich im Hintergrund passiert.
			 */


	/*Bei diesem Testfall wird der Status aller Services abgefragt. 
	 * Sollten alle Serivces erreichbar sein, wird der Test erfolgreich abgeschlossen.
	*/
        
			testcase status_services() runs on RESTComponent {
					var charstring serviceStat_logingateway := getServiceStatus(LoginGW);
					var charstring serviceStat_authservice := getServiceStatus(Authservice);
					var charstring serviceStat_userservice := getServiceStatus(Userservice);
					const charstring antwort:= "Running";
					timer t_Delay := 5.0; 
					t_Delay.start;
					t_Delay.timeout;
					log("LoginGateway is " & serviceStat_logingateway);
					log("AuthService is " & serviceStat_authservice);
					log("UserService is " & serviceStat_userservice);
				

					if (serviceStat_logingateway == antwort and serviceStat_authservice== antwort and serviceStat_userservice== antwort) {
						setverdict(pass);
						stop;
					}
				
					setverdict(fail);	

				
				}
				
				/* 	im nächsten Testfall:
				 * 	handelt es sich um Timeout vom Login-Gateway,
					wenn er nicht zu erreichen ist. Falls das Login-Gateway nicht erreichbar ist, kommt es
					dann zu einem Timeout und es wird kein Response mit einem entsprechenden HTTPStatuscode
					zurückkommen, da kein Endpoint angesprochen werden kann.
				 */
		   
	testcase test_RESTPost_LoginGateway_ausfall_loginGateway() runs on RESTComponent system LoginRestService {
									log("Das LoginGateway is " & getServiceStatus(LoginGW));
									log(stopService(LoginGW));
									log("Das LoginGateway is " & getServiceStatus(LoginGW));
									map(mtc:p, system:s) param (config(AUTHORIZATION));
									p.send(loginRequest);
									timer t;
									t.start(5.0);
									var HTTPResponse valHttp;
									alt {
									[] p.receive(LoginResponse:{ body := omit, authorization := ?}) {
											setverdict(pass);
										}
									[] p
									   .receive(HTTPResponse:
												{
													statusLine := {statusCode := 500, reasonPhrase := *},
													headers := ?,
													body := *
												}) -> value valHttp{
												var charstring jwt := valHttp.headers[8].val;
												
											setverdict(pass);
											t.stop;
										}
									[] p.receive {
											setverdict(fail);
										}
									[] t.timeout {
											setverdict(pass);
										}
									}
									
									log(startService(LoginGW));
								}
								
		/*
		 * 	Im nächsten wird validiert, dass das Zusammenspiel beim Ausfall vom Userservice nicht
			funktioniert. Beim Beginn des Tests wird 90 Sekunden gewartet, bis zur das Login-Gateway
			wieder lebt, da er im vorherigen Testfall gestoppt war. Als nächstes wird ein Request
			ans Login-Gateway gesendet und zwar mit positver Erwartung, dass ein Reponse mit
			HTTP-Statuscode 200 zurückkommt. Danach wird der Userservice gestoppt und dann
			wird direkt ein zweites Request an das Login-Gateway geschickt und dieses Mal mit der
			Erwartung eines HTTP-Statuscodes 500, da der Userservice nicht erreichbar ist. Das soll
			dann bedeuten, dass die Kommunikation bei einem Ausfall von einem oder mehreren
			Services fehlschlägt und als Folge dessen das Zusammenspiel der Services scheitert.
		 */
		testcase test_RESTPost_LoginGateway_kommunikation_user() runs on RESTComponent system LoginRestService {
			
					map(mtc:p, system:s) param (config(AUTHORIZATION));
					timer t_Delay := 90.0; 
					t_Delay.start;
					t_Delay.timeout;
					p.send(loginRequest);
					timer t;
					//t.start(5.0);
					var HTTPResponse valHttp;
					alt {
					[] p.receive(LoginResponse:{ body := omit, authorization := ?}) {
							//setverdict(pass);
						}
					[] p
					   .receive(HTTPResponse:
								{
									statusLine := {statusCode := 200, reasonPhrase := *},
									headers := ?,
									body := *
								}) -> value valHttp{
								var charstring jwt := valHttp.headers[8].val;
								
							setverdict(pass);
							
						}
					[] p.receive {
							setverdict(fail);
						}
					
				
				
					}
					log("Der Userservice is " & getServiceStatus(Userservice));
									log(stopService(Userservice));
									log("Der Userservice is " & getServiceStatus(Userservice));
									map(mtc:p, system:s) param (config(AUTHORIZATION));
							p.send(loginRequest);
									alt{
										[] p.receive(LoginResponse:{ body := ?, authorization := omit}) {
																setverdict(pass);
															}
														[] p
														   .receive(HTTPResponse:
																	{
																		statusLine := {statusCode := 500, reasonPhrase := *},
																		headers := ?,
																		body := *
																	}) -> value valHttp{
																	var charstring jwt := valHttp.headers[8].val;
															
																log("Interner Serverfehler, da mindestens ein Service nicht erreichbar ist");
		
																setverdict(pass);
															
															}
														[] p.receive {
																setverdict(fail);
															}
						
									}
									log(startService(Userservice));
				}
			
			
		// im Analog zum oberen Testfall läuft der gleiche Prozess aber dieses Mal für Authservice
		
	testcase test_RESTPost_LoginGateway_kommunikation_auth() runs on RESTComponent system LoginRestService {
				timer t_Delay := 90.0; 
				t_Delay.start;
				t_Delay.timeout;
				map(mtc:p, system:s) param (config(AUTHORIZATION));
				p.send(loginRequest);
				timer t;
				
				var HTTPResponse valHttp;
				alt {
				[] p.receive(LoginResponse:{ body := omit, authorization := ?}) {
						setverdict(pass);
					}
				[] p
				   .receive(HTTPResponse:
							{
								statusLine := {statusCode := 200, reasonPhrase := *},
								headers := ?,
								body := *
							}) -> value valHttp{
							var charstring jwt := valHttp.headers[8].val;
							
						setverdict(pass);
						
					}
				[] p.receive {
						setverdict(fail);
					}
					
				
				
				}
				log("Der Authservice is " & getServiceStatus(Authservice));
								log(stopService(Authservice));
								log("Der Authservice is " & getServiceStatus(Authservice));
								map(mtc:p, system:s) param (config(AUTHORIZATION));
						p.send(loginRequest);
								alt{
									[] p.receive(LoginResponse:{ body := ?, authorization := omit}) {
															setverdict(pass);
														}
													[] p
													   .receive(HTTPResponse:
																{
																	statusLine := {statusCode := 500, reasonPhrase := *},
																	headers := ?,
																	body := *
																}) -> value valHttp{
																var charstring jwt := valHttp.headers[8].val;
															
															log("Interner Serverfehler, da mindestens ein Service nicht erreichbar ist");
		
															setverdict(pass);
															
														}
													[] p.receive {
															setverdict(fail);
														}
						
								}
								log(startService(Authservice));
			}
			
		/*  Im nächsten Testfall erweitert sich das Szenario um einen zweiten Service,
		    indem Authservice und Userservice gestoppt werden. Dabei wird erwartet, dass beim
			zweiten Request ein Reponse mit HTTP-Statuscode 500 zurückkommt. Der Statuscode
			500 kommt aus der Tatsache, dass mindestens ein Service nicht erreichbar ist und das
			reicht, um einen internen Serverfehler bei der Kommunikation zu geben. 500 als Statscode
			bedeutet wiederum, dass das Login nicht möglich war.
		 *    
		 */
	testcase test_RESTPost_LoginGateway_kommunikation_auth_user() runs on RESTComponent system LoginRestService {
			
							map(mtc:p, system:s) param (config(AUTHORIZATION));
							timer t_Delay := 90.0; 
							t_Delay.start;
							t_Delay.timeout;
							p.send(loginRequest);
							timer t;
							var HTTPResponse valHttp;
							alt {
							[] p.receive(LoginResponse:{ body := omit, authorization := ?}) {
									setverdict(pass);
								}
							[] p
							   .receive(HTTPResponse:
										{
											statusLine := {statusCode := 200, reasonPhrase := *},
											headers := ?,
											body := *
										}) -> value valHttp{
										var charstring jwt := valHttp.headers[8].val;
									
									setverdict(pass);
									
								}
							[] p.receive {
									setverdict(fail);
								}
					
				
				
							}
											log("Der Authservice is " & getServiceStatus(Authservice));
											log("Der Userservice is " & getServiceStatus(Userservice));
											log(stopService(Authservice));
											log("Der Authservice is " & getServiceStatus(Authservice));
											log(stopService(Userservice));
											log("Der Userservice is " & getServiceStatus(Userservice));
											map(mtc:p, system:s) param (config(AUTHORIZATION));
									p.send(loginRequest);
											alt{
												[] p.receive(LoginResponse:{ body := ?, authorization := omit}) {
																		setverdict(pass);
																	}
																[] p
																   .receive(HTTPResponse:
																			{
																				statusLine := {statusCode := 500, reasonPhrase := *},
																				headers := ?,
																				body := *
																			}) -> value valHttp{
																			var charstring jwt := valHttp.headers[8].val;
															
																		log("Interner Serverfehler, da mindestens ein Service nicht erreichbar ist");
		
																		setverdict(pass);
															
																	}
																[] p.receive {
																		setverdict(fail);
																	}
						
											}
											log(startService(Authservice));
											log(startService(Userservice));
		
	
									}
									
									
									
	
}

with {
	encode "RESTfull/json"
}
	