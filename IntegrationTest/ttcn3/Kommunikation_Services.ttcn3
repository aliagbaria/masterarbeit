module Kommunikation_Services {
	import from Lib_Http all;

		import from UserIdService all;
		import from Lib_ServiceManagement all;
		import from Templates_Ausfallszeanrien all;

		

	
        
			testcase status_services() runs on RESTComponent {
					var charstring serviceStat_logingateway := getServiceStatus(LoginGW);
					var charstring serviceStat_authservice := getServiceStatus(Authservice);
					var charstring serviceStat_userservice := getServiceStatus(Userservice);
					const charstring antwort:= "Running";
		
					log("LoginGateway is " & serviceStat_logingateway);
					log("AuthService is " & serviceStat_authservice);
					log("UserService is " & serviceStat_userservice);
				

					if (serviceStat_logingateway == antwort and serviceStat_authservice== antwort and serviceStat_userservice== antwort) {
						setverdict(pass);
						stop;
					}
				
					setverdict(fail);	

				
				}
		   
	testcase test_RESTPost_LoginGateway_ausfall_loginGateway() runs on RESTComponent system LoginRestService {
									log("Das LoginGateway is " & getServiceStatus(LoginGW));
									log(stopService(LoginGW));
									log("Das LoginGateway is " & getServiceStatus(LoginGW));
									map(mtc:p, system:s) param (config(AUTHORIZATION));
									p.send(loginRequest);
									timer t;
									t.start(5.0);
									var HTTPResponse valHttp;
									alt {
									[] p.receive(LoginResponse:{ body := omit, authorization := ?}) {
											setverdict(pass);
										}
									[] p
									   .receive(HTTPResponse:
												{
													statusLine := {statusCode := 500, reasonPhrase := *},
													headers := ?,
													body := *
												}) -> value valHttp{
												var charstring jwt := valHttp.headers[8].val;
												
											setverdict(pass);
											t.stop;
										}
									[] p.receive {
											setverdict(fail);
										}
									[] t.timeout {
											setverdict(pass);
										}
									}
									
									log(startService(LoginGW));
								}
								
		
		testcase test_RESTPost_LoginGateway_kommunikation_user() runs on RESTComponent system LoginRestService {
			
					map(mtc:p, system:s) param (config(AUTHORIZATION));
					timer t_Delay := 90.0; 
					t_Delay.start;
					t_Delay.timeout;
					p.send(loginRequest);
					timer t;
					//t.start(5.0);
					var HTTPResponse valHttp;
					alt {
					[] p.receive(LoginResponse:{ body := omit, authorization := ?}) {
							//setverdict(pass);
						}
					[] p
					   .receive(HTTPResponse:
								{
									statusLine := {statusCode := 200, reasonPhrase := *},
									headers := ?,
									body := *
								}) -> value valHttp{
								var charstring jwt := valHttp.headers[8].val;
								
							setverdict(pass);
							
						}
					[] p.receive {
							setverdict(fail);
						}
					
				
				
					}
					log("Der Userservice is " & getServiceStatus(Userservice));
									log(stopService(Userservice));
									log("Der Userservice is " & getServiceStatus(Userservice));
									map(mtc:p, system:s) param (config(AUTHORIZATION));
							p.send(loginRequest);
									alt{
										[] p.receive(LoginResponse:{ body := ?, authorization := omit}) {
																setverdict(pass);
															}
														[] p
														   .receive(HTTPResponse:
																	{
																		statusLine := {statusCode := 500, reasonPhrase := *},
																		headers := ?,
																		body := *
																	}) -> value valHttp{
																	var charstring jwt := valHttp.headers[8].val;
															
																log("Interner Serverfehler, da mindestens ein Service nicht erreichbar ist");
		
																setverdict(pass);
															
															}
														[] p.receive {
																setverdict(fail);
															}
						
									}
									log(startService(Userservice));
				}
			
			
		
	testcase test_RESTPost_LoginGateway_kommunikation_auth() runs on RESTComponent system LoginRestService {
				timer t_Delay := 90.0; 
				t_Delay.start;
				t_Delay.timeout;
				map(mtc:p, system:s) param (config(AUTHORIZATION));
				p.send(loginRequest);
				timer t;
				
				var HTTPResponse valHttp;
				alt {
				[] p.receive(LoginResponse:{ body := omit, authorization := ?}) {
						setverdict(pass);
					}
				[] p
				   .receive(HTTPResponse:
							{
								statusLine := {statusCode := 200, reasonPhrase := *},
								headers := ?,
								body := *
							}) -> value valHttp{
							var charstring jwt := valHttp.headers[8].val;
							
						setverdict(pass);
						
					}
				[] p.receive {
						setverdict(fail);
					}
					
				
				
				}
				log("Der Authservice is " & getServiceStatus(Authservice));
								log(stopService(Authservice));
								log("Der Authservice is " & getServiceStatus(Authservice));
								map(mtc:p, system:s) param (config(AUTHORIZATION));
						p.send(loginRequest);
								alt{
									[] p.receive(LoginResponse:{ body := ?, authorization := omit}) {
															setverdict(pass);
														}
													[] p
													   .receive(HTTPResponse:
																{
																	statusLine := {statusCode := 500, reasonPhrase := *},
																	headers := ?,
																	body := *
																}) -> value valHttp{
																var charstring jwt := valHttp.headers[8].val;
															
															log("Interner Serverfehler, da mindestens ein Service nicht erreichbar ist");
		
															setverdict(pass);
															
														}
													[] p.receive {
															setverdict(fail);
														}
						
								}
								log(startService(Authservice));
			}
		
	testcase test_RESTPost_LoginGateway_kommunikation_auth_user() runs on RESTComponent system LoginRestService {
			
							map(mtc:p, system:s) param (config(AUTHORIZATION));
							timer t_Delay := 90.0; 
							t_Delay.start;
							t_Delay.timeout;
							p.send(loginRequest);
							timer t;
							var HTTPResponse valHttp;
							alt {
							[] p.receive(LoginResponse:{ body := omit, authorization := ?}) {
									setverdict(pass);
								}
							[] p
							   .receive(HTTPResponse:
										{
											statusLine := {statusCode := 200, reasonPhrase := *},
											headers := ?,
											body := *
										}) -> value valHttp{
										var charstring jwt := valHttp.headers[8].val;
									
									setverdict(pass);
									
								}
							[] p.receive {
									setverdict(fail);
								}
					
				
				
							}
											log("Der Authservice is " & getServiceStatus(Authservice));
											log("Der Userservice is " & getServiceStatus(Userservice));
											log(stopService(Authservice));
											log("Der Authservice is " & getServiceStatus(Authservice));
											log(stopService(Userservice));
											log("Der Userservice is " & getServiceStatus(Userservice));
											map(mtc:p, system:s) param (config(AUTHORIZATION));
									p.send(loginRequest);
											alt{
												[] p.receive(LoginResponse:{ body := ?, authorization := omit}) {
																		setverdict(pass);
																	}
																[] p
																   .receive(HTTPResponse:
																			{
																				statusLine := {statusCode := 500, reasonPhrase := *},
																				headers := ?,
																				body := *
																			}) -> value valHttp{
																			var charstring jwt := valHttp.headers[8].val;
															
																		log("Interner Serverfehler, da mindestens ein Service nicht erreichbar ist");
		
																		setverdict(pass);
															
																	}
																[] p.receive {
																		setverdict(fail);
																	}
						
											}
											log(startService(Authservice));
											log(startService(Userservice));
		
	
									}
									
									
									
	
}

with {
	encode "RESTfull/json"
}
	